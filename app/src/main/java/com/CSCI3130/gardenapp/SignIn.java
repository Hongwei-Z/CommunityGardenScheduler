package com.CSCI3130.gardenapp;

import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.util.PatternsCompat;

import com.android.volley.AuthFailureError;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.StringRequest;
import com.android.volley.toolbox.Volley;
import com.google.android.gms.common.api.ApiException;
import com.google.android.gms.common.api.CommonStatusCodes;
import com.google.android.gms.safetynet.SafetyNet;
import com.google.android.gms.safetynet.SafetyNetApi;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.HashMap;
import java.util.Map;

/**
 * Activity class which allows a user to sign into the app
 *
 * @author Arjav Gupta
 */
public class SignIn extends AppCompatActivity {

    //UI element declarations
    EditText emailTxt, passwordTxt;
    Button logInBtn, signUpBtn;
    CheckBox captchaCheck;
    TextView captchaErrorTxt;

    //firebase authentication object
    FirebaseAuth mFirebaseAuth;
    boolean successful;

    //keys for reCAPTCHA
    public static String SITE_KEY = "6LcTB7EZAAAAAM5RIdncPhmVfXJHVktYSbiWuAua";
    public static String SITE_SECRET_KEY = "6LcTB7EZAAAAAEZ0LPGXBxvhjKxYxXeEvBDadCX_";

    String userResponseToken;

    //request queue for reCAPTCHA
    RequestQueue mQueue;

    //boolean flag for successful captcha
    public static boolean captcha_pass;

    /**
     * Gets site key for reCAPTCHA
     * @return - Returns site key
     */
    public static String getSiteKey() { return SITE_KEY; }

    /**
     * Sets site key for reCAPTCHA - mostly for testing purposes
     * @param siteKey - site key as string
     */
    public static void setSiteKey(String siteKey) { SITE_KEY = siteKey; }

    /**
     * Gets site secret key for reCAPTCHA
     * @return - site secret key as string
     */
    public static String getSiteSecretKey() { return SITE_SECRET_KEY; }

    /**
     * Sets site secret key for reCAPTCHA
     * @param siteSecretKey - site secret key as string
     */
    public static void setSiteSecretKey(String siteSecretKey) { SITE_SECRET_KEY = siteSecretKey; }

    /**
     * onCreate method for initial activity setup
     *
     * @param savedInstanceState - saved instance autogenerated by android studio
     */
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        successful = false;
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_signin);

        //UI element assignments
        emailTxt = findViewById(R.id.emailTxt_signin);
        passwordTxt = findViewById(R.id.passwordTxt_signin);
        logInBtn = findViewById(R.id.signInBtn_signin);
        signUpBtn = findViewById(R.id.signUpBtn_signin);
        captchaCheck = findViewById(R.id.captchaCheckBox);
        captchaErrorTxt = findViewById(R.id.captchaErrorText);

        //get instance for firebase authentication
        mFirebaseAuth = FirebaseAuth.getInstance();

        //sets up authorization listener
        mFirebaseAuth.addAuthStateListener(checkLoginState());

        //set up volley request queue
        mQueue = Volley.newRequestQueue(this);

        captcha_pass = false;
    }

    /**
     * Method checks if anyone is logged in through this method
     */
    public FirebaseAuth.AuthStateListener checkLoginState() {
        return firebaseAuth -> {
            FirebaseUser mFirebaseUser = mFirebaseAuth.getCurrentUser();
            //if logged in, go to welcome screen
            if (mFirebaseUser != null && !successful) {
                successful = true;
                Toast.makeText(SignIn.this, "You are logged in", Toast.LENGTH_SHORT).show();
                Intent i = new Intent(SignIn.this, Welcome.class);
                captcha_pass = true;
                startActivity(i);
            }
        };
    }

    /**
     * onClick function for captcha check box
     */
    public void Captcha_onClick(View v){
        if (!captcha_pass) {
            captchaCheck.setChecked(false);

            SafetyNet.getClient(this).verifyWithRecaptcha(SITE_KEY)
                    .addOnSuccessListener(this,
                            new OnSuccessListener<SafetyNetApi.RecaptchaTokenResponse>() {
                                @Override
                                public void onSuccess(SafetyNetApi.RecaptchaTokenResponse response) {
                                    // Indicates communication with reCAPTCHA service was successful
                                    userResponseToken = response.getTokenResult();
                                    if (!userResponseToken.isEmpty()) {
                                        // Validate the user response token using reCAPTCHA siteverify API.
                                        sendRecaptchaRequest();
                                    }
                                }
                            })
                    .addOnFailureListener(this, new OnFailureListener() {
                        @Override
                        public void onFailure(@NonNull Exception e) {
                            if (e instanceof ApiException) {
                                // An error occurred when communicating with reCAPTCHA
                                ApiException apiException = (ApiException) e;
                                int statusCode = apiException.getStatusCode();
                                Log.d(SignIn.class.getSimpleName(), "Error: " + CommonStatusCodes
                                        .getStatusCodeString(statusCode));
                            } else {
                                // Different unknown error occurred
                                Log.d(SignIn.class.getSimpleName(), "Error: " + e.getMessage());
                            }
                        }
                    });
        } else {
            captchaCheck.setChecked(true);
        }
    }
    /**
     * onClick function for log in button (wrapper)
     */
    public void LogIn_onclick(View v) {
        //get text from email/password fields
        String email = emailTxt.getText().toString();
        String pass = passwordTxt.getText().toString();

        //attempt to log in
        //if inputs are valid, try to sign in
        if (validInputs(email, pass, captcha_pass)) {
            LogInFirebase(email, pass);
            //otherwise display appropriate errors
        } else {
            errorDisplays(email, pass);
        }

    }

    /**
     * Method sends reCaptcha server-side request after verification is successful
     */
    public void sendRecaptchaRequest()  {

        String url = "https://www.google.com/recaptcha/api/siteverify";

        StringRequest stringRequest = new StringRequest(Request.Method.POST, url,
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        try {
                            JSONObject obj = new JSONObject(response);
                            Toast.makeText(SignIn.this, obj.getString("success"), Toast.LENGTH_LONG).show();
                            if (obj.getString("success").equals("true")){
                                captcha_pass = true;
                                captchaCheck.setChecked(true);
                                captchaErrorTxt.setText("");
                            }
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        Toast.makeText(SignIn.this, error.getMessage(), Toast.LENGTH_LONG).show();
                    }
                }) {

            @Override
            protected Map<String, String> getParams() throws AuthFailureError {
                Map<String, String> params = new HashMap<>();
                params.put("secret", SITE_SECRET_KEY);
                params.put("response", userResponseToken);
                return params;
            }
        };
        mQueue.add(stringRequest);

    }

    /**
     * onClick method for sign up button
     *
     * @param v - view of associated button/onClick performer
     */
    public void SignUp_onclick(View v) {
        //starts sign up activity
        Intent i = new Intent(SignIn.this, SignUp.class);
        startActivity(i);
    }

    /**
     * Method checks that inputs from user are valid
     *
     * @param email - email address from user
     * @param pass  - password from user
     * @return boolean - true/false for whether given inputs are valid
     */
    public boolean validInputs(String email, String pass, boolean captcha_pass) {

        //email must not be empty and must have valid pattern
        if (email.isEmpty()) {
            return false;
        }
        if (!PatternsCompat.EMAIL_ADDRESS.matcher(email).matches()) {
            return false;
        }

        //check that password isn't empty
        if (pass.isEmpty()) {
            return false;
        }

        if (!captcha_pass){
            return false;
        }
        //check that password is at least 6 characters long
        return pass.length() >= 6;

        //if both fields valid
    }

    /**
     * Method displays error messages based on whether user inputs are valid
     *
     * @param email - email address from user
     * @param pass  - password from user
     */
    public void errorDisplays(String email, String pass) {

        //email must not be empty and must have valid pattern
        if (email.isEmpty()) {
            emailTxt.setError("Please enter your email address");
            emailTxt.requestFocus();
        }
        if (!PatternsCompat.EMAIL_ADDRESS.matcher(email).matches()) {
            emailTxt.setError("Please enter a valid email address");
            emailTxt.requestFocus();
        }

        //check that password isn't empty and is at least 6 characters long
        if (pass.isEmpty()) {
            passwordTxt.setError("Please enter your password");
            passwordTxt.requestFocus();
        } else {
            if (pass.length() < 6) {
                passwordTxt.setError("Invalid Password");
                passwordTxt.requestFocus();
            }
        }

        //captcha must be passed in order to log in
        if (captcha_pass == false){
            captchaErrorTxt.setText("Please verify your identity with reCAPTCHA");
            captchaErrorTxt.setTextColor(Color.RED);
        }
    }

    /**
     * Method attempts to log into Firebase using given user credentials
     *
     * @param email - email address from user
     * @param pass  - password from user
     */
    public void LogInFirebase(String email, String pass) {

        //run sign in method for firebase
        mFirebaseAuth.signInWithEmailAndPassword(email, pass).addOnCompleteListener(SignIn.this, task -> {

            //if login is not successful, return error
            if (!task.isSuccessful()) {
                Toast.makeText(SignIn.this, "Sign In Error. Please Try Again.", Toast.LENGTH_SHORT).show();
            }
        });

    }
}
